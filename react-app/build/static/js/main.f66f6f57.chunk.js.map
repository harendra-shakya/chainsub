{"version":3,"sources":["components/Address.jsx","helpers/Transactor.js","helpers/Web3ModalSetup.js","helpers/ipfs.js","helpers/rpc.js","components/Balance.jsx","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/WalletImport.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.jsx","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","components/GasGauge.jsx","components/Header.jsx","components/Ramp.jsx","hooks/useStaticJsonRPC.js","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","components/NetworkDisplay.jsx","components/FaucetHint.jsx","views/Hints.jsx","views/Subgraph.jsx","App.jsx","hooks/GasPrice.js","index.jsx","contracts/external_contracts.js","constants.js"],"names":["Text","Typography","Address","props","currentTheme","useThemeSwitcher","address","value","ens","useLookupAddress","ensProvider","ensSplit","split","validEnsCheck","length","etherscanLink","blockExplorer","blockExplorerLink","displayAddress","substr","size","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","scale","fontSize","paddingLeft","onChange","editable","copyable","text","avatar","paragraph","rows","ethers","require","callbacks","Transactor","providerOrSigner","gasPrice","etherscan","tx","callback","Signer","isSigner","provider","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","options","dappId","BLOCKNATIVE_DAPPID","system","networkId","chainId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","name","etherscanTxUrl","Promise","result","utils","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","window","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","walletLinkProvider","WalletLink","appName","makeWeb3Provider","ALCHEMY_KEY","web3ModalSetup","SafeAppWeb3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","INFURA_ID","rpc","portis","display","logo","Portis","id","fortmatic","Fortmatic","key","connector","_options","enable","authereum","Authereum","create","host","port","protocol","getRPCPollTime","_network","RPC_POLL_TIME","Balance","useState","dollarMode","setDollarMode","localProviderPollingTime","balance","useBalance","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","padding","cursor","onClick","Blockie","isENS","endsWith","AddressInput","setValue","scan","setScan","currentValue","updateAddress","useCallback","newValue","resolveName","possibleAddress","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","isAddress","addonAfter","marginTop","count","CameraOutlined","QrcodeOutlined","EtherInput","mode","setMode","setDisplay","useEffect","usdValue","ethValue","WalletImport","setShowImport","importMnemonic","setImportMnemonic","importMnemonicIndex","setImportMnemonicIndex","password","setPassword","importPrivatekey","setImportPrivatekey","importAddress","setImportAddress","calculatePK","ethersSeed","mnemonicToSeed","ethersHDNode","HDNode","fromSeed","fullPath","ethersDerivedHDNode","derivePath","ethersPrivateKey","privateKey","calculateAddress","officialEthersWallet","Wallet","opacity","Password","disabled","height","float","currentPrivateKey","localStorage","getItem","setItem","Date","now","trim","location","reload","marginRight","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","showImport","providerSend","title","WalletOutlined","rotate","showImportButton","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","fullLink","el","document","createElement","appendChild","select","execCommand","removeChild","success","createRandom","_signingKey","inputStyle","visible","paddingRight","onOk","onCancel","footer","type","loading","parseEther","to","SendOutlined","Account","accountButtonInfo","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isContract","cachedProvider","action","marginLeft","shape","constants","tryToDisplay","thing","asText","toNumber","displayable","formatUnits","overflowWrap","constructor","mostReadable","v","includes","tryToDisplayAsText","map","replaceAll","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","icon","BigNumber","getFunctionInputKey","input","inputIndex","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputs","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","fn","handleForm","returned","buttonIcon","stateMutability","defaultValue","bordered","args","baseType","overrides","noContractDisplay","className","borderRadius","fontWeight","role","Contract","contract","customContract","account","show","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","Object","entries","interface","functions","filter","contractDisplay","contractFuncInfo","contractFunc","connect","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","getFaucetAddress","listAccounts","_faucetAddress","GasGauge","parseInt","Title","Header","link","subTitle","justifyContent","flexDirection","flex","alignItems","children","defaultProps","Ramp","modalUp","setModalUp","allFaucets","networks","n","faucet","DollarCircleOutlined","RampInstantSDK","hostAppName","hostLogoUrl","swapAmount","swapAsset","userAddress","createProvider","url","p","providers","StaticJsonRpcProvider","ready","useStaticJsonRPC","urlArray","setProvider","handleProviders","race","_p","Select","Option","Swap","ThemeSwitcher","isDarkMode","setIsDarkMode","switcher","themes","right","bottom","checked","isChecked","dark","light","NetworkDisplay","NETWORKCHECK","localChainId","selectedChainId","targetNetwork","USE_NETWORK_SELECTOR","networkDisplay","networkSelected","NETWORK","networkLocal","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","rpcUrl","blockExplorerUrls","request","method","params","switchTx","FaucetHint","faucetClicked","setFaucetClicked","yourLocalBalance","faucetTx","useGasPrice","faucetHint","highlight","Subgraph","EXAMPLE_GRAPHQL","EXAMPLE_GQL","gql","useQuery","pollInterval","purposeColumns","dataIndex","render","record","sender","d","toISOString","newPurpose","setNewPurpose","deployWarning","paddingBottom","writeContracts","YourContract","setPurpose","dataSource","purposes","columns","rowKey","border","fetcher","graphQLParams","fetch","subgraphUri","headers","then","response","json","docExplorerOpen","query","initialNetwork","NETWORKS","hyperspace","Web3ModalSetup","App","networkOptions","injectedProvider","setInjectedProvider","selectedNetwork","chainSub","setChainSub","subContractState","setSubContractState","useLocation","ChainSubConfig","abi","ChainSub","process","REACT_APP_PROVIDER","mainnetProviderPollingTime","clearCachedProvider","disconnect","setTimeout","useExchangeEthPrice","speed","setGasPrice","loadGasPrice","hasOwnProperty","axios","get","ETHERSCAN_KEY","newGasPrice","catch","usePoller","useUserProviderAndSigner","yourMainnetBalance","deployedContracts","externalContracts","readContracts","factoryContractWithSigner","Factory","mainnetContracts","myMainnetDAIBalance","useContractReader","requestProvider","Web3Provider","code","reason","checkSafeApp","isSafeApp","faucetAvailable","connection","createSubscriptionContract","makeSub","newContractAddress","subContract","subContractWithSigner","err","chainSubContracttest","useBurner","lte","selectedKeys","pathname","Item","exact","path","align","gutter","prevTheme","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","ApolloProvider","themeMap","defaultTheme","getElementById","module","exports","DAI","internalType","anonymous","indexed","constant","outputs","UNI","FACTORY","REACT_APP_INFURA_KEY","REACT_APP_ALCHEMY_KEY","REACT_APP_ETHERSCAN_API_KEY","REACT_APP_BLOCKNATIVE_DAPP_ID","REACT_APP_HARDHAT_HOST","localhost","REACT_APP_CODESPACES","hostname","replace","global","mainnet","goerli","gnosis","zksyncalpha","chiado","polygon","mumbai","localOptimismL1","localOptimism","goerliOptimism","optimism","goerliArbitrum","arbitrum","devnetArbitrum","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","fantom","testnetFantom","moonbeam","moonriver","moonbaseAlpha","moonbeamDevNode"],"mappings":"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","file":"static/js/main.f66f6f57.chunk.js","sourcesContent":["import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Blockies from \"react-blockies\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\n\n// changed value={address} to address={address}\n\nconst { Text } = Typography;\n\n/** \n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n**/\n\nconst blockExplorerLink = (address, blockExplorer) => `${blockExplorer || \"https://etherscan.io/\"}address/${address}`;\n\nexport default function Address(props) {\n  const { currentTheme } = useThemeSwitcher();\n  const address = props.value || props.address;\n  const ens = useLookupAddress(props.ensProvider, address);\n  const ensSplit = ens && ens.split(\".\");\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  let displayAddress = address?.substr(0, 5) + \"...\" + address?.substr(-4);\n\n  if (validEnsCheck) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {props.onChange ? (\n          <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        ) : (\n          <Text copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        )}\n      </span>\n    </span>\n  );\n}\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n      var options = null;\n      var notify = null;\n      options = {\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n          const possibleFunction = callbacks[txInformation.transaction.hash];\n          if (typeof possibleFunction === \"function\") {\n            possibleFunction(txInformation.transaction);\n          }\n        },\n      };\n\n      notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","import Portis from \"@portis/web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Authereum from \"authereum\";\nimport Fortmatic from \"fortmatic\";\nimport WalletLink from \"walletlink\";\nimport { ALCHEMY_KEY, INFURA_ID } from \"../constants\";\nimport { SafeAppWeb3Modal } from \"@gnosis.pm/safe-apps-web3modal\";\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: \"coinbase\",\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, 1);\n\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\n/**\n  Web3 modal helps us \"connect\" external wallets:\n**/\nconst web3ModalSetup = () =>\n  new SafeAppWeb3Modal({\n    network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n    cacheProvider: true, // optional\n    theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // required\n        options: {\n          bridge: \"https://polygon.bridge.walletconnect.org\",\n          infuraId: INFURA_ID,\n          rpc: {\n            10: \"https://mainnet.optimism.io\", // xDai\n            100: \"https://rpc.gnosischain.com\", // xDai\n            137: \"https://polygon-rpc.com\",\n            31337: \"http://localhost:8545\",\n            42161: \"https://arb1.arbitrum.io/rpc\",\n            80001: \"https://rpc-mumbai.maticvigil.com\",\n            71401: \"https://godwoken-testnet-v1.ckbapp.dev\",\n          },\n        },\n      },\n      portis: {\n        display: {\n          logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\n          name: \"Portis\",\n          description: \"Connect to Portis App\",\n        },\n        package: Portis,\n        options: {\n          id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\n        },\n      },\n      fortmatic: {\n        package: Fortmatic, // required\n        options: {\n          key: \"pk_live_5A7C91B2FC585A17\", // required\n        },\n      },\n      // torus: {\n      //   package: Torus,\n      //   options: {\n      //     networkParams: {\n      //       host: \"https://localhost:8545\", // optional\n      //       chainId: 1337, // optional\n      //       networkId: 1337 // optional\n      //     },\n      //     config: {\n      //       buildEnv: \"development\" // optional\n      //     },\n      //   },\n      // },\n      \"custom-walletlink\": {\n        display: {\n          logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\n          name: \"Coinbase\",\n          description: \"Connect to Coinbase Wallet (not Coinbase App)\",\n        },\n        package: walletLinkProvider,\n        connector: async (provider, _options) => {\n          await provider.enable();\n          return provider;\n        },\n      },\n      authereum: {\n        package: Authereum, // required\n      },\n    },\n  });\n\nexport default web3ModalSetup;\n","import { create } from \"ipfs-http-client\";\nimport { BufferList } from \"bl\";\nexport const ipfs = create({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\n\nexport async function addToIPFS(file) {\n  const fileAdded = await ipfs.add(file);\n\n  return fileAdded;\n}\n\nexport function urlFromCID(cid) {\n  return `https://ipfs.infura.io/ipfs/${cid}`;\n}\n\nexport async function getFromIPFS(hashToGet) {\n  for await (const file of ipfs.cat(hashToGet)) {\n    const content = new BufferList(file).toString();\n\n    return content;\n  }\n}\n","import { RPC_POLL_TIME } from \"../constants\";\n\n// Get the appropriate polling time for a given provider.\nexport const getRPCPollTime = provider => {\n  // No polling interval on local hardhat chain.\n  if (provider?._network?.chainId === 31337) {\n    return 0;\n  } else {\n    return RPC_POLL_TIME;\n  }\n};\n","import React, { useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\nimport { getRPCPollTime } from \"../helpers\";\n\nconst { utils } = require(\"ethers\");\n\n/**\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n**/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  let localProviderPollingTime = getRPCPollTime(props.provider);\n\n  const balance = useBalance(props.provider, props.address, localProviderPollingTime);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\n  if (typeof props.value !== \"undefined\") usingBalance = props.value;\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier || 1;\n\n  if (dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { Badge, Input } from \"antd\";\nimport React, { useCallback, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport QrReader from \"react-qr-reader\";\n\nimport Blockie from \"./Blockie\";\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/** \n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n**/\nexport default function AddressInput(props) {\n  const { ensProvider, onChange } = props;\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (isENS(address)) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  return (\n    <div>\n      {scan ? (\n        <div\n          style={{\n            zIndex: 256,\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n          }}\n          onClick={() => {\n            setScan(false);\n          }}\n        >\n          <QrReader\n            delay={250}\n            resolution={1200}\n            onError={e => {\n              console.log(\"SCAN ERROR\", e);\n              setScan(false);\n            }}\n            onScan={newValue => {\n              if (newValue) {\n                console.log(\"SCAN VALUE\", newValue);\n                let possibleNewValue = newValue;\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\n                }\n                setScan(false);\n                updateAddress(possibleNewValue);\n              }\n            }}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      ) : (\n        \"\"\n      )}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\n        addonAfter={\n          <div\n            style={{ marginTop: 4, cursor: \"pointer\" }}\n            onClick={() => {\n              setScan(!scan);\n            }}\n          >\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n              <QrcodeOutlined style={{ fontSize: 18 }} />\n            </Badge>{\" \"}\n            Scan\n          </div>\n        }\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/**\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n**/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={mode === \"USD\" ? \"$\" : \"Ξ\"}\n      value={display}\n      addonAfter={\n        !props.price ? (\n          \"\"\n        ) : (\n          <div\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              if (mode === \"USD\") {\n                setMode(\"ETH\");\n                setDisplay(currentValue);\n              } else {\n                setMode(\"USD\");\n                if (currentValue) {\n                  const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n                  setDisplay(usdValue);\n                } else {\n                  setDisplay(currentValue);\n                }\n              }\n            }}\n          >\n            {mode === \"USD\" ? \"USD 🔀\" : \"ETH 🔀\"}\n          </div>\n        )\n      }\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Button, Input } from \"antd\";\nimport Address from \"./Address\";\n\nexport default function WalletImport({ setShowImport }) {\n  const [importMnemonic, setImportMnemonic] = useState();\n  const [importMnemonicIndex, setImportMnemonicIndex] = useState(\"0\");\n  const [password, setPassword] = useState(\"\");\n  const [importPrivatekey, setImportPrivatekey] = useState();\n  const [importAddress, setImportAddress] = useState();\n\n  useEffect(() => {\n    const calculatePK = async () => {\n      if (importMnemonic) {\n        const ethersSeed = ethers.utils.mnemonicToSeed(importMnemonic, password);\n        const ethersHDNode = ethers.utils.HDNode.fromSeed(ethersSeed);\n\n        const wallet_hdpath = \"m/44'/60'/0'/0/\";\n        const fullPath = wallet_hdpath + importMnemonicIndex;\n\n        const ethersDerivedHDNode = ethersHDNode.derivePath(fullPath);\n        const ethersPrivateKey = ethersDerivedHDNode.privateKey;\n\n        setImportPrivatekey(ethersPrivateKey);\n      } else {\n        setImportPrivatekey();\n      }\n    };\n    calculatePK();\n  }, [importMnemonic, importMnemonicIndex, password]);\n\n  useEffect(() => {\n    const calculateAddress = async () => {\n      if (importPrivatekey) {\n        try {\n          const officialEthersWallet = new ethers.Wallet(importPrivatekey);\n          console.log(officialEthersWallet);\n          setImportAddress(officialEthersWallet.address);\n        } catch (e) {\n          console.log(e);\n          setImportAddress(\"\");\n        }\n      }\n    };\n    calculateAddress();\n  }, [importPrivatekey]);\n\n  return (\n    <div>\n      <div style={{ marginTop: 21, width: 420 }}>\n        <h2>IMPORT</h2>\n      </div>\n\n      <div style={{ opacity: 0.5 }}>mnemonic</div>\n      <Input.Password\n        style={{ width: 380 }}\n        size=\"large\"\n        placeholder=\"word1 word2 word3\"\n        onChange={async e => {\n          setImportMnemonic(e.target.value);\n        }}\n      />\n\n      <Input\n        style={{ width: 69 }}\n        value={importMnemonicIndex}\n        onChange={e => {\n          setImportMnemonicIndex(e.target.value);\n        }}\n        size=\"large\"\n      />\n\n      <Input.Password\n        style={{ width: 380 }}\n        size=\"large\"\n        placeholder=\"optional password\"\n        onChange={async e => {\n          setPassword(e.target.value);\n        }}\n      />\n\n      <div style={{ marginTop: 21, width: 420 }}>\n        <h4>OR</h4>\n      </div>\n\n      <div style={{ opacity: 0.5 }}>private key</div>\n      <Input.Password\n        disabled={importMnemonic}\n        style={{ width: 420 }}\n        size=\"large\"\n        value={importPrivatekey}\n        placeholder=\"0x...\"\n        onChange={e => {\n          setImportPrivatekey(e.target.value);\n        }}\n      />\n\n      <hr />\n\n      {importAddress ? (\n        <div style={{ width: 420, height: 200 }}>\n          <div style={{ float: \"right\", marginTop: 64 }}>\n            <Address value={importAddress} />\n          </div>\n          <hr />\n        </div>\n      ) : (\n        \"\"\n      )}\n\n      <div style={{ float: \"right\" }}>\n        <Button\n          style={{ marginTop: 16 }}\n          disabled={!importPrivatekey || (importMnemonic && importMnemonic.length < 7)} //safety third!\n          onClick={() => {\n            const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n            if (currentPrivateKey) {\n              window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n            }\n\n            try {\n              const officialEthersWallet = new ethers.Wallet(importPrivatekey.trim());\n              console.log(officialEthersWallet);\n              setImportAddress(officialEthersWallet.address);\n              window.localStorage.setItem(\"metaPrivateKey\", importPrivatekey);\n              window.location.reload();\n              //setShowImport(!showImport)\n            } catch (e) {\n              console.log(e);\n            }\n          }}\n        >\n          <span style={{ marginRight: 8 }}>💾</span>Save\n        </Button>\n      </div>\n\n      <Button\n        style={{ marginTop: 16 }}\n        onClick={() => {\n          setShowImport(false);\n        }}\n      >\n        <span style={{ marginRight: 8 }}>⏪</span>Cancel\n      </Button>\n    </div>\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, message, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\nimport WalletImport from \"./WalletImport\";\n\nconst { Text } = Typography;\n\n/**\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n**/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const [showImport, setShowImport] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: props.padding ? props.padding : 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: props.size ? props.size : 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  const showImportButton = (\n    <Button\n      style={{ marginTop: 16 }}\n      onClick={() => {\n        setShowImport(true);\n      }}\n    >\n      <span style={{ marginRight: 8 }}>💾</span>Import\n    </Button>\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      const fullLink = \"https://punkwallet.io/pk#\" + pk;\n\n      display = (\n        <div>\n          <div>\n            <b>Private Key:</b>\n            <div>\n              <Text style={{ fontSize: 11 }} copyable>\n                {pk}\n              </Text>\n            </div>\n\n            <div style={{ marginTop: 16 }}>\n              <div>\n                <b>Punk Wallet:</b>\n              </div>\n              <Text style={{ fontSize: 11 }} copyable>\n                {fullLink}\n              </Text>\n            </div>\n\n            <br />\n            <i>\n              Point your camera phone at qr code to open in &nbsp;\n              <a target=\"_blank\" href={fullLink} rel=\"noopener noreferrer\">\n                Punk Wallet\n              </a>\n              :\n            </i>\n\n            <div\n              style={{ cursor: \"pointer\" }}\n              onClick={() => {\n                const el = document.createElement(\"textarea\");\n                el.value = fullLink;\n                document.body.appendChild(el);\n                el.select();\n                document.execCommand(\"copy\");\n                document.body.removeChild(el);\n                message.success(<span style={{ position: \"relative\" }}>Copied Private Key Link</span>);\n              }}\n            >\n              <QR value={fullLink} size=\"450\" level=\"H\" includeMargin renderAs=\"svg\" />\n            </div>\n          </div>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={\n          showImport\n            ? null\n            : [\n                showImportButton,\n                privateKeyButton,\n                receiveButton,\n                <Button\n                  key=\"submit\"\n                  type=\"primary\"\n                  disabled={!amount || !toAddress || qr}\n                  loading={false}\n                  onClick={() => {\n                    const tx = Transactor(props.signer || props.provider);\n\n                    let value;\n                    try {\n                      value = ethers.utils.parseEther(\"\" + amount);\n                    } catch (e) {\n                      // failed to parseEther, try something else\n                      value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n                    }\n\n                    tx({\n                      to: toAddress,\n                      value,\n                    });\n                    setOpen(!open);\n                    setQr();\n                  }}\n                >\n                  <SendOutlined /> Send\n                </Button>,\n              ]\n        }\n      >\n        {showImport ? <WalletImport setShowImport={setShowImport} /> : display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/** \n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n    isContract={boolean}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n**/\n\nexport default function Account({\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n  isContract,\n}) {\n  const { currentTheme } = useThemeSwitcher();\n\n  let accountButtonInfo;\n  if (web3Modal?.cachedProvider) {\n    accountButtonInfo = { name: \"Logout\", action: logoutOfWeb3Modal };\n  } else {\n    accountButtonInfo = { name: \"Connect\", action: loadWeb3Modal };\n  }\n\n  const display = !minimized && (\n    <span>\n      {address && (\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} fontSize={20} />\n      )}\n      <Balance address={address} provider={localProvider} price={price} size={20} />\n      {!isContract && (\n        <Wallet\n          address={address}\n          provider={localProvider}\n          signer={userSigner}\n          ensProvider={mainnetProvider}\n          price={price}\n          color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n          size={22}\n          padding={\"0px\"}\n        />\n      )}\n    </span>\n  );\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      {display}\n      {web3Modal && (\n        <Button style={{ marginLeft: 8 }} shape=\"round\" onClick={accountButtonInfo.action}>\n          {accountButtonInfo.name}\n        </Button>\n      )}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/** \n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n**/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\n\nimport Address from \"../Address\";\n\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = (thing, asText = false, blockExplorer) => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return asText ? thing : <Address address={thing} fontSize={22} blockExplorer={blockExplorer} />;\n  }\n  if (thing && thing.constructor && thing.constructor.name === \"Array\") {\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\n    const displayable = JSON.stringify(thing.map(mostReadable));\n    return asText ? (\n      displayable\n    ) : (\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\n    );\n  }\n  return JSON.stringify(thing);\n};\n\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\n\nexport { tryToDisplay, tryToDisplayAsText };\n","import { Button, Col, Divider, Row } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\n\nimport { tryToDisplay } from \"./utils\";\n\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh, blockExplorer }) => {\n  const [variable, setVariable] = useState(\"\");\n\n  const refresh = useCallback(async () => {\n    try {\n      const funcResponse = await contractFunction();\n      setVariable(funcResponse);\n      triggerRefresh(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }, [setVariable, contractFunction, triggerRefresh]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh, refreshRequired, contractFunction]);\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={14}>\n          <h2>{tryToDisplay(variable, false, blockExplorer)}</h2>\n        </Col>\n        <Col span={2}>\n          <h2>\n            <Button type=\"link\" onClick={refresh} icon=\"🔄\" />\n          </h2>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n};\n\nexport default DisplayVariable;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\n\nimport { Transactor } from \"../../helpers\";\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nconst isReadable = fn => fn.stateMutability === \"view\" || fn.stateMutability === \"pure\";\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const handleForm = returned => {\n    if (returned) {\n      setForm({});\n    }\n  };\n\n  const buttonIcon = isReadable(functionInfo) ? (\n    <Button style={{ marginLeft: -32 }}>Read📡</Button>\n  ) : (\n    <Button style={{ marginLeft: -32 }}>Send💸</Button>\n  );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              const args = functionInfo.inputs.map((input, inputIndex) => {\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\n                let value = form[key];\n                if ([\"array\", \"tuple\"].includes(input.baseType)) {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                try {\n                  const returned = await contractFunction(...args);\n                  handleForm(returned);\n                  result = tryToDisplayAsText(returned);\n                } catch (err) {\n                  console.error(err);\n                }\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                handleForm(returned);\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { Card } from \"antd\";\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\nimport React, { useMemo, useState } from \"react\";\nimport Address from \"../Address\";\nimport Balance from \"../Balance\";\nimport DisplayVariable from \"./DisplayVariable\";\nimport FunctionForm from \"./FunctionForm\";\n\nconst noContractDisplay = (\n  <div>\n    Loading...{\" \"}\n    <div style={{ padding: 32 }}>\n      You need to run{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run chain\n      </span>{\" \"}\n      and{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      to see your contract here.\n    </div>\n    <div style={{ padding: 32 }}>\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\n        ☢️\n      </span>\n      Warning: You might need to run\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      <i>again</i> after the frontend comes up!\n    </div>\n  </div>\n);\n\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\n\nexport default function Contract({\n  customContract,\n  account,\n  gasPrice,\n  signer,\n  provider,\n  name,\n  show,\n  price,\n  blockExplorer,\n  chainId,\n  contractConfig,\n}) {\n  const contracts = useContractLoader(provider, contractConfig, chainId);\n  let contract;\n  if (!customContract) {\n    contract = contracts ? contracts[name] : \"\";\n  } else {\n    contract = customContract;\n  }\n\n  const address = contract ? contract.address : \"\";\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\n\n  const displayedContractFunctions = useMemo(() => {\n    const results = contract\n      ? Object.entries(contract.interface.functions).filter(\n          fn => fn[1][\"type\"] === \"function\" && !(show && show.indexOf(fn[1][\"name\"]) < 0),\n        )\n      : [];\n    return results;\n  }, [contract, show]);\n\n  const [refreshRequired, triggerRefresh] = useState(false);\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\n    const contractFunc =\n      contractFuncInfo[1].stateMutability === \"view\" || contractFuncInfo[1].stateMutability === \"pure\"\n        ? contract[contractFuncInfo[0]]\n        : contract.connect(signer)[contractFuncInfo[0]];\n\n    if (typeof contractFunc === \"function\") {\n      if (isQueryable(contractFuncInfo[1])) {\n        // If there are no inputs, just display return value\n        return (\n          <DisplayVariable\n            key={contractFuncInfo[1].name}\n            contractFunction={contractFunc}\n            functionInfo={contractFuncInfo[1]}\n            refreshRequired={refreshRequired}\n            triggerRefresh={triggerRefresh}\n            blockExplorer={blockExplorer}\n          />\n        );\n      }\n\n      // If there are inputs, display a form to allow users to provide these\n      return (\n        <FunctionForm\n          key={\"FF\" + contractFuncInfo[0]}\n          contractFunction={contractFunc}\n          functionInfo={contractFuncInfo[1]}\n          provider={provider}\n          gasPrice={gasPrice}\n          triggerRefresh={triggerRefresh}\n        />\n      );\n    }\n    return null;\n  });\n\n  return (\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\n      <Card\n        title={\n          <div style={{ fontSize: 24 }}>\n            {name}\n            <div style={{ float: \"right\" }}>\n              <Address value={address} blockExplorer={blockExplorer} />\n              <Balance address={address} provider={provider} price={price} />\n            </div>\n          </div>\n        }\n        size=\"large\"\n        style={{ marginTop: 25, width: \"100%\" }}\n        loading={contractDisplay && contractDisplay.length <= 0}\n      >\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\n      </Card>\n    </div>\n  );\n}\n","import { Button, Input, Tooltip } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/**\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n**/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  const { price, placeholder, localProvider, ensProvider } = props;\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const updateAddress = newValue => {\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n      setAddress(newValue);\n    }\n  };\n\n  const tx = Transactor(localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={placeholder ? placeholder : \"local faucet\"}\n        prefix={blockie}\n        value={address}\n        onChange={e => updateAddress(e.target.value)}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.5\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={localProvider}\n              ensProvider={ensProvider}\n              price={price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"antd\";\n\n// added display of 0 instead of NaN if gas price is not provided\n\n/**\n  ~ What it does? ~\n\n  Displays gas gauge\n\n  ~ How can I use? ~\n\n  <GasGauge\n    gasPrice={gasPrice}\n  />\n\n  ~ Features ~\n\n  - Provide gasPrice={gasPrice} and get current gas gauge\n**/\n\nexport default function GasGauge(props) {\n  return (\n    <Button\n      onClick={() => {\n        window.open(\"https://ethgasstation.info/\");\n      }}\n      size=\"large\"\n      shape=\"round\"\n    >\n      <span style={{ marginRight: 8 }}>\n        <span role=\"img\" aria-label=\"fuelpump\">\n          ⛽️\n        </span>\n      </span>\n      {typeof props.gasPrice === \"undefined\" ? 0 : parseInt(props.gasPrice, 10) / 10 ** 9}g\n    </Button>\n  );\n}\n","import React from \"react\";\nimport { Typography } from \"antd\";\n\nconst { Title, Text } = Typography;\n\n// displays a page header\n\nexport default function Header({ link, title, subTitle, ...props }) {\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"space-between\", padding: \"1.2rem\" }}>\n      <div style={{ display: \"flex\", flexDirection: \"column\", flex: 1, alignItems: \"start\" }}>\n        <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n          <Title level={4} style={{ margin: \"0 0.5rem 0 0\" }}>\n            {title}\n          </Title>\n        </a>\n        <Text type=\"secondary\" style={{ textAlign: \"left\" }}>\n          {subTitle}\n        </Text>\n      </div>\n      {props.children}\n    </div>\n  );\n}\n\nHeader.defaultProps = {\n  link: \"https://github.com/scaffold-eth/scaffold-eth\",\n  title: \"🏗 Scaffold-Eth\",\n  subTitle: \"Forkable Ethereum dev stack focused on fast product iteration\",\n};\n","import { Button, Divider, Modal } from \"antd\";\nimport React, { useState } from \"react\";\nimport { DollarCircleOutlined } from \"@ant-design/icons\";\nimport { RampInstantSDK } from \"@ramp-network/ramp-instant-sdk\";\n\n// added display of 0 if price={price} is not provided\n\n/**\n  ~ What it does? ~\n\n  Displays current ETH price and gives options to buy ETH through Wyre/Ramp/Coinbase\n                            or get through Rinkeby/Ropsten/Kovan/Goerli\n\n  ~ How can I use? ~\n\n  <Ramp\n    price={price}\n    address={address}\n  />\n\n  ~ Features ~\n\n  - Ramp opens directly in the application, component uses RampInstantSDK\n  - Provide price={price} and current ETH price will be displayed\n  - Provide address={address} and your address will be pasted into Wyre/Ramp instantly\n**/\n\nexport default function Ramp(props) {\n  const [modalUp, setModalUp] = useState(\"down\");\n\n  const type = \"default\";\n\n  const allFaucets = [];\n  for (const n in props.networks) {\n    if (props.networks[n].chainId !== 31337 && props.networks[n].chainId !== 1) {\n      allFaucets.push(\n        <p key={props.networks[n].chainId}>\n          <Button\n            style={{ color: props.networks[n].color }}\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(props.networks[n].faucet);\n            }}\n          >\n            {props.networks[n].name}\n          </Button>\n        </p>,\n      );\n    }\n  }\n\n  return (\n    <div>\n      <Button\n        size=\"large\"\n        shape=\"round\"\n        onClick={() => {\n          setModalUp(\"up\");\n        }}\n      >\n        <DollarCircleOutlined style={{ color: \"#52c41a\" }} />{\" \"}\n        {typeof props.price === \"undefined\" ? 0 : props.price.toFixed(2)}\n      </Button>\n      <Modal\n        title=\"Buy ETH\"\n        visible={modalUp === \"up\"}\n        onCancel={() => {\n          setModalUp(\"down\");\n        }}\n        footer={[\n          <Button\n            key=\"back\"\n            onClick={() => {\n              setModalUp(\"down\");\n            }}\n          >\n            cancel\n          </Button>,\n        ]}\n      >\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://pay.sendwyre.com/purchase?destCurrency=ETH&sourceAmount=25&dest=\" + props.address);\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-us\">\n                🇺🇸\n              </span>\n            </span>\n            Wyre\n          </Button>\n        </p>\n        <p>\n          {\" \"}\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              new RampInstantSDK({\n                hostAppName: \"scaffold-eth\",\n                hostLogoUrl: \"https://scaffoldeth.io/scaffold-eth.png\",\n                swapAmount: \"100000000000000000\", // 0.1 ETH in wei  ?\n                swapAsset: \"ETH\",\n                userAddress: props.address,\n              })\n                .on(\"*\", event => console.log(event))\n                .show();\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-gb\">\n                🇬🇧\n              </span>\n            </span>\n            Ramp\n          </Button>\n        </p>\n\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://www.coinbase.com/buy-ethereum\");\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\" aria-label=\"bank\">\n              🏦\n            </span>\n            Coinbase\n          </Button>\n        </p>\n\n        <Divider />\n\n        <h2>Testnet ETH</h2>\n\n        {allFaucets}\n      </Modal>\n    </div>\n  );\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst createProvider = async url => {\n  const p = new ethers.providers.StaticJsonRpcProvider(url);\n\n  await p.ready;\n\n  return p;\n};\n\nexport default function useStaticJsonRPC(urlArray, localProvider = null) {\n  const [provider, setProvider] = useState(null);\n\n  const handleProviders = useCallback(async () => {\n    try {\n      const p = await Promise.race(urlArray.map(createProvider));\n      const _p = await p;\n\n      setProvider(_p);\n    } catch (error) {\n      // todo: show notification error about provider issues\n      console.log(error);\n    }\n  }, [urlArray]);\n\n  useEffect(() => {\n    // Re-use the localProvider if it's mainnet (to use only one instance of it)\n    if (localProvider && localProvider?._network.chainId === 1) {\n      setProvider(localProvider);\n      return;\n    }\n\n    handleProviders();\n\n    // eslint-disable-next-line\n  }, [JSON.stringify(urlArray), localProvider]);\n\n  return provider;\n}\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\n// @ts-ignore\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\n\nexport const loadAppContracts = async () => {\n  const config = {};\n  config.deployedContracts = (await contractListPromise).default ?? {};\n  config.externalContracts = (await externalContractsPromise).default ?? {};\n  return config;\n};\n","import {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\n\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  console.log(\"no call of that name!\");\n  return undefined;\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n  const [tokens, setTokens] = useState();\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenListResponse = await fetch(_tokenListUri);\n        const tokenListJson = await tokenListResponse.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI, _tokenListUri, activeChainId]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n    // eslint-disable-next-line\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades, exact]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  return (\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","import { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { utils, ethers } from \"ethers\";\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\n\nimport { NETWORKS } from \"../constants\";\nimport { Transactor } from \"../helpers\";\n\n/** \nThis is a component for bridging between L1 & L2\nCurrently it supports Testnet deposits for Arbitrum & Optimism\n\n __          _______ _____\n \\ \\        / /_   _|  __ \\\n  \\ \\  /\\  / /  | | | |__) |\n   \\ \\/  \\/ /   | | |  ___/\n    \\  /\\  /   _| |_| |\n     \\/  \\/   |_____|_|\n\n\n**/\n\nexport default function L2ArbitrumBridge({ address, userSigner }) {\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\n  const [L1Provider, setL1Provider] = useState(\"\");\n  const [L2Provider, setL2Provider] = useState(\"\");\n  const [rollup, setRollup] = useState(\"arbitrum\");\n  const [environment] = useState(\"test\");\n\n  const rollupConfig = {\n    arbitrum: {\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\n    },\n    optimism: {\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\n    },\n  };\n\n  const activeConfig = rollupConfig[rollup][environment];\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner);\n\n  useEffect(() => {\n    async function setProviders() {\n      const L1 = activeConfig.L1;\n      const L2 = activeConfig.L2;\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\n      setL1EthBalance(\"...\");\n      setL2EthBalance(\"...\");\n    }\n    setProviders();\n  }, [rollup, activeConfig.L1, activeConfig.L2]);\n\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\n\n  useOnBlock(L1Provider, async () => {\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\n    const yourL1Balance = await L1Provider.getBalance(address);\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\n    const yourL2Balance = await L2Provider.getBalance(address);\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\n  });\n\n  const { Option } = Select;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 8,\n      },\n    },\n  };\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"token\",\n      key: \"token\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} L1 Balance`,\n      dataIndex: \"l1\",\n      key: \"l1\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\n      dataIndex: \"l2\",\n      key: \"l2\",\n      align: \"center\",\n    },\n  ];\n\n  const data = [\n    {\n      key: \"1\",\n      token: \"ETH\",\n      l1: \"Ξ\" + L1EthBalance,\n      l2: \"Ξ\" + L2EthBalance,\n    },\n  ];\n\n  const [form] = Form.useForm();\n\n  const onAssetChange = value => {\n    console.log(value);\n  };\n\n  async function onFinish(values) {\n    console.log(contracts);\n    console.log(values.amount.toString());\n    console.log(rollup);\n    let newTx;\n    try {\n      if (rollup === \"arbitrum\") {\n        newTx = await tx(\n          contracts.Inbox.depositEth(1_300_000, {\n            value: utils.parseEther(values.amount.toString()),\n            gasLimit: 300000,\n          }),\n        );\n      } else if (rollup === \"optimism\") {\n        newTx = await tx(\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\n            value: utils.parseEther(values.amount.toString()),\n          }),\n        );\n      }\n      await newTx.wait();\n      console.log(\"woop!\");\n    } catch (e) {\n      console.log(e);\n      console.log(\"something went wrong!\");\n    }\n  }\n\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\n\n  return (\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\n        <Radio.Group\n          value={rollup}\n          onChange={e => {\n            setRollup(e.target.value);\n          }}\n          style={{ marginBottom: 10 }}\n        >\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\n        </Radio.Group>\n\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\n\n        <Form\n          {...formItemLayout}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n          initialValues={{ assetType: \"eth\" }}\n        >\n          <Form.Item\n            name=\"assetType\"\n            label=\"Select Asset Type\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\n              <Option value=\"eth\">ETH</Option>\n              <Option disabled value=\"erc20\">\n                ERC-20\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"address\" label=\"Address\">\n            <Input disabled placeholder={address} />\n          </Form.Item>\n          <Form.Item\n            name=\"amount\"\n            label=\"Amount to bridge\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\nconst ArbitrumInboxABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"InboxMessageDelivered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\n    name: \"InboxMessageDeliveredFromOrigin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"WhitelistSourceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"createRetryableTicket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\n    name: \"depositEth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMaster\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2Message\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2MessageFromOrigin\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"updateWhitelistSource\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"whitelist\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\nconst OVM_L1StandardBridgeABI = [\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\n];\n\nconst L1BridgeMetadata = {\n  // Arbitrium Contract's\n  44010: {\n    contracts: {\n      Inbox: {\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      Inbox: {\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  // Optimism Contract's\n  31337: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n};\n","import { Alert, Button } from \"antd\";\nimport React from \"react\";\n\nimport { NETWORK } from \"../constants\";\n\nfunction NetworkDisplay({\n  NETWORKCHECK,\n  localChainId,\n  selectedChainId,\n  targetNetwork,\n  USE_NETWORK_SELECTOR,\n  logoutOfWeb3Modal,\n}) {\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = USE_NETWORK_SELECTOR ? null : (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 150, top: 25, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n  console.log({ networkDisplay });\n\n  return networkDisplay;\n}\n\nexport default NetworkDisplay;\n","import { Button } from \"antd\";\nimport React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useBalance, useGasPrice } from \"eth-hooks\";\n\nimport { getRPCPollTime, Transactor } from \"../helpers\";\n\nfunction FaucetHint({ localProvider, targetNetwork, address }) {\n  const [faucetClicked, setFaucetClicked] = useState(false);\n\n  const localProviderPollingTime = getRPCPollTime(localProvider);\n\n  // fetch local balance\n  const yourLocalBalance = useBalance(localProvider, address, localProviderPollingTime);\n\n  // get gas Price from network\n  const gasPrice = useGasPrice(targetNetwork, \"fast\", localProviderPollingTime);\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  let faucetHint = \"\";\n\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ position: \"absolute\", right: 65, top: 65 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  return faucetHint;\n}\n\nexport default FaucetHint;\n","import { Select } from \"antd\";\nimport React, { useState } from \"react\";\nimport { utils } from \"ethers\";\n\nimport { useTokenList } from \"eth-hooks/dapps/dex\";\nimport { Address, AddressInput } from \"../components\";\n\nconst { Option } = Select;\n\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\n  const listOfTokens = useTokenList(\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\n  );\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>👷</span>\n        Edit your <b>contract</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/contracts\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛰</span>\n        <b>compile/deploy</b> with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚀</span>\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/react-app/src/contracts/\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🎛</span>\n        Edit your <b>frontend</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/reactapp/src/App.js\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔭</span>\n        explore the\n        <span\n          className=\"highlight\"\n          style={{\n            marginLeft: 4,\n            marginRight: 4,\n            /* backgroundColor: \"#f9f9f9\", */\n            padding: 4,\n            borderRadius: 4,\n            fontWeight: \"bolder\",\n          }}\n        >\n          🖇 hooks\n        </span>\n        and\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          📦 components\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        for example, the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          useBalance()\n        </span>{\" \"}\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\n      </div>\n\n      <div style={{ margin: 8 }}>\n        <div>\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            tokenlists.org!\n          </a>\n        </div>\n        <Select\n          showSearch\n          value={selectedToken}\n          onChange={value => {\n            console.log(`selected ${value}`);\n            setSelectedToken(value);\n          }}\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n          optionFilterProp=\"children\"\n        >\n          {listOfTokens.map(token => (\n            <Option key={token.address + \"_\" + token.symbol} value={token.symbol}>\n              {token.symbol}\n            </Option>\n          ))}\n        </Select>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        as you build your app you&apos;ll need web3 specific components like an\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          {\"<AddressInput/>\"}\n        </span>\n        component:\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\n          <AddressInput ensProvider={mainnetProvider} />\n        </div>\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        this balance could be multiplied by\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          price\n        </span>{\" \"}\n        that is loaded with the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          usePrice\n        </span>{\" \"}\n        hook with the current value: <b>${price}</b>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💧</span>\n        use the <b>faucet</b> to send funds to\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <Address address={address} minimized /> {address}\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        deploy to a testnet or mainnet by editing\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/hardhat.config.js\n        </span>\n        and running\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔑</span>\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run generate\n        </span>\n        will create a deployer account in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat\n        </span>\n        <div style={{ marginTop: 8 }}>\n          (use{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn run account\n          </span>{\" \"}\n          to display deployer address and balance)\n        </div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>⚙️</span>\n        build your app with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run build\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        ship it!\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run surge\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run s3\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run ipfs\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💬</span>\n        for support, join this\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\n            Telegram Chat\n          </a>\n          &nbsp; or &nbsp;\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://discord.gg/pRsr6rwG\">\n            Discord\n          </a>\n        </span>\n      </div>\n      <div style={{ padding: 128 }}>\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\n      </div>\n    </div>\n  );\n}\n","import { gql, useQuery } from \"@apollo/client\";\nimport { Button, Input, Table, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport GraphiQL from \"graphiql\";\nimport \"graphiql/graphiql.min.css\";\nimport fetch from \"isomorphic-fetch\";\nimport React, { useState } from \"react\";\nimport { Address } from \"../components\";\n\nconst highlight = {\n  marginLeft: 4,\n  marginRight: 8,\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n  borderRadius: 4,\n  fontWeight: \"bolder\",\n};\n\nfunction Subgraph(props) {\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\n      id\n      purpose\n      createdAt\n      sender {\n        id\n      }\n    }\n    senders {\n      id\n      address\n      purposeCount\n    }\n  }\n  `;\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\n\n  const purposeColumns = [\n    {\n      title: \"Purpose\",\n      dataIndex: \"purpose\",\n      key: \"purpose\",\n    },\n    {\n      title: \"Sender\",\n      key: \"id\",\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\n    },\n    {\n      title: \"createdAt\",\n      key: \"createdAt\",\n      dataIndex: \"createdAt\",\n      render: d => new Date(d * 1000).toISOString(),\n    },\n  ];\n\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  const deployWarning = (\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\n  );\n\n  return (\n    <>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        You will find that parsing/tracking events with the{\" \"}\n        <span className=\"highlight\" style={highlight}>\n          useEventListener\n        </span>{\" \"}\n        hook becomes a chore for every new project.\n      </div>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        Instead, you can use{\" \"}\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\n          The Graph\n        </a>{\" \"}\n        with 🏗 scaffold-eth (\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\n          learn more\n        </a>\n        ):\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>⛓️</span>\n        Make sure your local chain is running first:\n        <span className=\"highlight\" style={highlight}>\n          yarn chain\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚮</span>\n        Clean up previous data, if there is any:\n        <span className=\"highlight\" style={highlight}>\n          yarn clean-graph-node\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        Spin up a local graph node by running\n        <span className=\"highlight\" style={highlight}>\n          yarn run-graph-node\n        </span>\n        <span style={{ marginLeft: 4 }}>\n          {\" \"}\n          (requires{\" \"}\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\n            {\" \"}\n            Docker\n          </a>\n          ){\" \"}\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📝</span>\n        Create your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-create-local\n        </span>\n        (only required once!)\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        Deploy your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-ship-local\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🖍️</span>\n        Edit your <b>local subgraph</b> in\n        <span className=\"highlight\" style={highlight}>\n          packages/subgraph/src\n        </span>\n        (learn more about subgraph definition{\" \"}\n        <a\n          href=\"https://thegraph.com/docs/en/developer/define-subgraph-hosted/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          here\n        </a>\n        )\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🤩</span>\n        Deploy your <b>contracts and your subgraph</b> in one go by running\n        <span className=\"highlight\" style={highlight}>\n          yarn deploy-and-graph\n        </span>\n      </div>\n\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\n        <div style={{ margin: 32, textAlign: \"right\" }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            onClick={() => {\n              console.log(\"newPurpose\", newPurpose);\n              /* look how you call setPurpose on your contract: */\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\n            }}\n          >\n            Set Purpose\n          </Button>\n        </div>\n\n        {data ? (\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\n        ) : (\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\n        )}\n\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\n        </div>\n      </div>\n\n      <div style={{ padding: 64 }}>...</div>\n    </>\n  );\n}\n\nexport default Subgraph;\n","import { Button, Col, Menu, Row } from \"antd\";\n\nimport \"antd/dist/antd.css\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  // useOnBlock,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Link, Route, Switch, useLocation } from \"react-router-dom\";\nimport \"./App.css\";\nimport {\n  Account,\n  Contract,\n  Faucet,\n  GasGauge,\n  Header,\n  Ramp,\n  ThemeSwitch,\n  NetworkDisplay,\n  FaucetHint,\n  NetworkSwitch,\n} from \"./components\";\nimport { NETWORKS, ALCHEMY_KEY } from \"./constants\";\nimport externalContracts from \"./contracts/external_contracts\";\n// contracts\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\nimport { getRPCPollTime, Transactor, Web3ModalSetup } from \"./helpers\";\nimport { Home, ExampleUI, Hints, Subgraph } from \"./views\";\nimport { useStaticJsonRPC, useGasPrice } from \"./hooks\";\nimport ChainSub from \"./contracts/ChainSub.json\";\nimport Factory from \"./contracts/Factory.json\";\n\nconst { ethers } = require(\"ethers\");\n\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/scaffold-eth/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Alchemy.com & Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst initialNetwork = NETWORKS.hyperspace; // <------- select your target frontend network (localhost, goerli, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\nconst USE_BURNER_WALLET = true; // toggle burner wallet feature\nconst USE_NETWORK_SELECTOR = false;\n\nconst web3Modal = Web3ModalSetup();\n\n// 🛰 providers\nconst providers = [\n  \"https://api.hyperspace.node.glif.io/rpc/v1/\",\n  \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\n  `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n  \"https://rpc.scaffoldeth.io:48544\",\n];\n\nfunction App(props) {\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\n  // reference './constants.js' for other networks\n  const networkOptions = [initialNetwork.name, \"mainnet\", \"goerli\", \"hyperspace\"];\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\n  const [chainSub, setChainSub] = useState();\n  const [subContractState, setSubContractState] = useState();\n\n  const location = useLocation();\n\n  //create a variable chainsubConfig that will store the address and abi of chainsub in the format {address: , abi:}\n  const ChainSubConfig = {\n    address: chainSub,\n    abi: ChainSub,\n  };\n\n  const targetNetwork = NETWORKS[selectedNetwork];\n\n  // 🔭 block explorer URL\n  const blockExplorer = targetNetwork.blockExplorer;\n\n  // load all your providers\n\n  const localProvider = useStaticJsonRPC([\n    process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\n  ]);\n  console.log(localProvider);\n  const mainnetProvider = useStaticJsonRPC(providers);\n\n  // Sensible pollTimes depending on the provider you are using\n  const localProviderPollingTime = getRPCPollTime(localProvider);\n  const mainnetProviderPollingTime = getRPCPollTime(mainnetProvider);\n\n  if (DEBUG) console.log(`Using ${selectedNetwork} network`);\n\n  // 🛰 providers\n  if (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider, mainnetProviderPollingTime);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"FastGasPrice\", localProviderPollingTime);\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\n  const userSigner = userProviderAndSigner.signer;\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address, localProviderPollingTime);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address, mainnetProviderPollingTime);\n\n  // const contractConfig = useContractConfig();\n\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\n  console.log(contractConfig);\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider, contractConfig);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n  //factory contract\n  const factoryContract = new ethers.Contract(\"0x2C4bDE0374fCBA4B18432338B03DA7D9Ec2B1D57\", Factory, userSigner);\n  const factoryContractWithSigner = factoryContract.connect(userSigner);\n\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\n\n  // If you want to call a function on a new block\n  // useOnBlock(mainnetProvider, () => {\n  //   console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  // });\n\n  // Then read your DAI balance like:\n  const myMainnetDAIBalance = useContractReader(\n    mainnetContracts,\n    \"DAI\",\n    \"balanceOf\",\n    [\"0x34aA3F359A9D614239015126635CE7732c18fDF3\"],\n    mainnetProviderPollingTime,\n  );\n\n  // keep track of a variable from the contract in the local React state:\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\", [], localProviderPollingTime);\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\", addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\n      console.log(\"🔐 writeContracts\", writeContracts);\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n    localChainId,\n    myMainnetDAIBalance,\n  ]);\n\n  const loadWeb3Modal = useCallback(async () => {\n    //const provider = await web3Modal.connect();\n    const provider = await web3Modal.requestProvider();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n    // eslint-disable-next-line\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n    //automatically connect if it is a safe app\n    const checkSafeApp = async () => {\n      if (await web3Modal.isSafeApp()) {\n        loadWeb3Modal();\n      }\n    };\n    checkSafeApp();\n  }, [loadWeb3Modal]);\n\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  async function createSubscriptionContract() {\n    try {\n      const makeSub = await tx(factoryContractWithSigner?.createSubscriptionContract(1, 2, 3));\n      console.log(makeSub);\n      //log and set the address with setChainSub\n      const newContractAddress = makeSub.to;\n      console.log(\"Contract deployed at:\", newContractAddress);\n      setChainSub(newContractAddress);\n      console.log(ChainSubConfig);\n\n      //add the new contract to the config\n      ChainSubConfig[newContractAddress] = {\n        address: newContractAddress,\n        abi: ChainSub.abi,\n      };\n\n\n      const subContract = new ethers.Contract(newContractAddress, ChainSub, userSigner);\n      const subContractWithSigner = subContract.connect(userSigner);\n      console.log(subContractWithSigner);\n\n      setSubContractState(subContract);\n    } catch (err) {\n      console.log({ err });\n    }\n  }\n\n  console.log(subContractState);\n  //log the functions of ChainSub using the ABI found in ChainSub.json\n  console.log(localProvider);\n  const chainSubContracttest = useContractLoader(localProvider, ChainSubConfig);\n\n  return (\n    <div className=\"App\">\n      {/* ✏️ Edit the header and change the title to your project name */}\n      <Header>\n        {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n        <div style={{ position: \"relative\", display: \"flex\", flexDirection: \"column\" }}>\n          <div style={{ display: \"flex\", flex: 1 }}>\n            {USE_NETWORK_SELECTOR && (\n              <div style={{ marginRight: 20 }}>\n                <NetworkSwitch\n                  networkOptions={networkOptions}\n                  selectedNetwork={selectedNetwork}\n                  setSelectedNetwork={setSelectedNetwork}\n                />\n              </div>\n            )}\n            <Account\n              useBurner={USE_BURNER_WALLET}\n              address={address}\n              localProvider={localProvider}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              price={price}\n              web3Modal={web3Modal}\n              loadWeb3Modal={loadWeb3Modal}\n              logoutOfWeb3Modal={logoutOfWeb3Modal}\n              blockExplorer={blockExplorer}\n            />\n          </div>\n        </div>\n      </Header>\n      {yourLocalBalance.lte(ethers.BigNumber.from(\"0\")) && (\n        <FaucetHint localProvider={localProvider} targetNetwork={targetNetwork} address={address} />\n      )}\n      <NetworkDisplay\n        NETWORKCHECK={NETWORKCHECK}\n        localChainId={localChainId}\n        selectedChainId={selectedChainId}\n        targetNetwork={targetNetwork}\n        logoutOfWeb3Modal={logoutOfWeb3Modal}\n        USE_NETWORK_SELECTOR={USE_NETWORK_SELECTOR}\n      />\n      <Menu style={{ textAlign: \"center\", marginTop: 20 }} selectedKeys={[location.pathname]} mode=\"horizontal\">\n        <Menu.Item key=\"/\">\n          <Link to=\"/\">App Home</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/subgraph\">\n          <Link to=\"/subgraph\">Subgraph</Link>\n        </Menu.Item>\n      </Menu>\n\n      <Switch>\n        <Route exact path=\"/\">\n          {/* create a button to console log the value of chainSubConfig */}\n          <Button onClick={() => console.log(ChainSubConfig, chainSubContracttest)}>Log ChainSubConfig</Button>\n\n          {/* create a button in the center of the page that uses the createSubscription function onclick*/}\n          {/* Center the button below in the middle of the page, and if it exists render the Contract component using chainSub as the address */}\n          {/* while awaiting the transaction to be mined, show a loading indicator */}\n          <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"10vh\" }}>\n            {chainSub ? (\n              <Contract\n                name={\"Your Subscription Contract\"}\n                customContract={subContractState}\n                signer={userSigner}\n                provider={localProvider}\n                address={chainSub}\n                blockExplorer=\"https://hyperspace.filfox.info/en\"\n                contractConfig={ChainSubConfig}\n                chainId={3141}\n              />\n            ) : (\n              <Button onClick={createSubscriptionContract} type=\"primary\">\n                Create Subscription Contract\n              </Button>\n            )}\n          </div>\n        </Route>\n\n        <Route path=\"/subgraph\">\n          <Subgraph\n            subgraphUri={props.subgraphUri}\n            tx={tx}\n            writeContracts={writeContracts}\n            mainnetProvider={mainnetProvider}\n          />\n        </Route>\n      </Switch>\n\n      <ThemeSwitch />\n\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={8}>\n            <Ramp price={price} address={address} networks={NETWORKS} />\n          </Col>\n\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\n            <GasGauge gasPrice={gasPrice} />\n          </Col>\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\n            <Button\n              onClick={() => {\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\n              }}\n              size=\"large\"\n              shape=\"round\"\n            >\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\n                💬\n              </span>\n              Support\n            </Button>\n          </Col>\n        </Row>\n\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={24}>\n            {\n              /*  if the local provider has a signer, let's show the faucet:  */\n              faucetAvailable ? (\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\n              ) : (\n                \"\"\n              )\n            }\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import axios from \"axios\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\nimport { ETHERSCAN_KEY } from \"../constants\";\n\nexport default function useGasPrice(targetNetwork, speed, pollTime = 39999) {\n  const [gasPrice, setGasPrice] = useState();\n  const loadGasPrice = async () => {\n    if (targetNetwork.hasOwnProperty(\"gasPrice\")) {\n      setGasPrice(targetNetwork.gasPrice);\n    } else {\n      axios\n        .get(\"https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey=\" + ETHERSCAN_KEY)\n        .then(response => {\n          console.log(\"response gas: \", response);\n          const newGasPrice = response.data.result[speed || \"FastGasPrice\"] * 1000000000;\n          if (newGasPrice !== gasPrice) {\n            setGasPrice(newGasPrice);\n          }\n        })\n        .catch(error => console.log(error));\n    }\n  };\n\n  usePoller(loadGasPrice, 39999);\n  return gasPrice;\n}\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <BrowserRouter>\n        <App subgraphUri={subgraphUri} />\n      </BrowserRouter>\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst FACTORYABI = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"cloneAddress\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"ownedBy\",\n        type: \"address\",\n      },\n    ],\n    name: \"CreateSubscription\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tier1Price\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tier2Price\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tier3Price\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"createSubscriptionContract\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n      FACTORY: {\n        address: \"0x2C4bDE0374fCBA4B18432338B03DA7D9Ec2B1D57\",\n        abi: FACTORYABI,\n      },\n    },\n  },\n};\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = process.env.REACT_APP_INFURA_KEY ?? \"460f40a260564ac4a4f4b3fffb032dad\";\n// My Alchemy Key, swap in yours from https://dashboard.alchemyapi.io/\nexport const ALCHEMY_KEY = process.env.REACT_APP_ALCHEMY_KEY ?? \"oKxs-03sij-U_N0iOlrSsZFr29-IqbuF\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = process.env.REACT_APP_ETHERSCAN_API_KEY ?? \"DNXJA8RX2Q3VZ4URQIWP7Z68CJXQZSC6AW\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = process.env.REACT_APP_BLOCKNATIVE_DAPP_ID ?? \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\n// Docker Hardhat Host\nexport const HARDHAT_HOST = process.env.REACT_APP_HARDHAT_HOST ?? \"http://localhost\";\n\n/*\nDecrease the number of RPC calls by passing this value to hooks\nwith pollTime (useContractReader, useBalance, etc.).\nSet it to 0 to disable it and make RPC calls \"onBlock\".\nNote: this is not used when you are in the local hardhat chain.\n*/\nexport const RPC_POLL_TIME = 30000;\n\nconst localRpcUrl = process.env.REACT_APP_CODESPACES\n  ? `https://${window.location.hostname.replace(\"3000\", \"8545\")}`\n  : \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: localRpcUrl,\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  gnosis: {\n    name: \"gnosis\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc.gnosischain.com\",\n    faucet: \"https://gnosisfaucet.com\",\n    blockExplorer: \"https://gnosisscan.io\",\n  },\n  zksyncalpha: {\n    name: \"zksyncalpha\",\n    color: \"#45488f\",\n    chainId: 280,\n    rpcUrl: \"https://zksync2-testnet.zksync.dev\",\n    blockExplorer: \"https://goerli.explorer.zksync.io/\",\n    gasPrice: 100000000,\n  },\n  chiado: {\n    name: \"chiado\",\n    color: \"#48a9a6\",\n    chainId: 10200,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc.chiadochain.net\",\n    faucet: \"https://gnosisfaucet.com\",\n    blockExplorer: \"https://blockscout.chiadochain.net\",\n  },\n  polygon: {\n    name: \"polygon\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://polygon-rpc.com/\",\n    blockExplorer: \"https://polygonscan.com/\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.polygon.technology/\",\n    blockExplorer: \"https://mumbai.polygonscan.com/\",\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n    gasPrice: 0,\n  },\n  goerliOptimism: {\n    name: \"goerliOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"https://optimism.io\",\n    rpcUrl: `https://goerli.optimism.io/`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n  goerliArbitrum: {\n    name: \"goerliArbitrum\",\n    color: \"#28a0f0\",\n    chainId: 421613,\n    blockExplorer: \"https://goerli-rollup-explorer.arbitrum.io\",\n    rpcUrl: \"https://goerli-rollup.arbitrum.io/rpc/\",\n  },\n  arbitrum: {\n    name: \"arbitrum\",\n    color: \"#28a0f0\",\n    chainId: 42161,\n    blockExplorer: \"https://arbiscan.io/\",\n    rpcUrl: \"https://arb1.arbitrum.io/rpc\",\n  },\n  devnetArbitrum: {\n    name: \"devnetArbitrum\",\n    color: \"#28a0f0\",\n    chainId: 421612,\n    blockExplorer: \"https://nitro-devnet-explorer.arbitrum.io/\",\n    rpcUrl: \"https://nitro-devnet.arbitrum.io/rpc\",\n  },\n  localAvalanche: {\n    name: \"localAvalanche\",\n    color: \"#666666\",\n    chainId: 43112,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  fujiAvalanche: {\n    name: \"fujiAvalanche\",\n    color: \"#666666\",\n    chainId: 43113,\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  mainnetAvalanche: {\n    name: \"mainnetAvalanche\",\n    color: \"#666666\",\n    chainId: 43114,\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  testnetHarmony: {\n    name: \"testnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666700000,\n    blockExplorer: \"https://explorer.pops.one/\",\n    rpcUrl: `https://api.s0.b.hmny.io`,\n    gasPrice: 1000000000,\n  },\n  mainnetHarmony: {\n    name: \"mainnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666600000,\n    blockExplorer: \"https://explorer.harmony.one/\",\n    rpcUrl: `https://api.harmony.one`,\n    gasPrice: 1000000000,\n  },\n  fantom: {\n    name: \"fantom\",\n    color: \"#1969ff\",\n    chainId: 250,\n    blockExplorer: \"https://ftmscan.com/\",\n    rpcUrl: `https://rpcapi.fantom.network`,\n    gasPrice: 1000000000,\n  },\n  testnetFantom: {\n    name: \"testnetFantom\",\n    color: \"#1969ff\",\n    chainId: 4002,\n    blockExplorer: \"https://testnet.ftmscan.com/\",\n    rpcUrl: `https://rpc.testnet.fantom.network`,\n    gasPrice: 1000000000,\n    faucet: \"https://faucet.fantom.network/\",\n  },\n  moonbeam: {\n    name: \"moonbeam\",\n    color: \"#53CBC9\",\n    chainId: 1284,\n    blockExplorer: \"https://moonscan.io\",\n    rpcUrl: \"https://rpc.api.moonbeam.network\",\n  },\n  moonriver: {\n    name: \"moonriver\",\n    color: \"#53CBC9\",\n    chainId: 1285,\n    blockExplorer: \"https://moonriver.moonscan.io/\",\n    rpcUrl: \"https://rpc.api.moonriver.moonbeam.network\",\n  },\n  moonbaseAlpha: {\n    name: \"moonbaseAlpha\",\n    color: \"#53CBC9\",\n    chainId: 1287,\n    blockExplorer: \"https://moonbase.moonscan.io/\",\n    rpcUrl: \"https://rpc.api.moonbase.moonbeam.network\",\n    faucet: \"https://discord.gg/SZNP8bWHZq\",\n  },\n  moonbeamDevNode: {\n    name: \"moonbeamDevNode\",\n    color: \"#53CBC9\",\n    chainId: 1281,\n    blockExplorer: \"https://moonbeam-explorer.netlify.app/\",\n    rpcUrl: \"http://127.0.0.1:9933\",\n  },\n  hyperspace: {\n    name: \"hyperspace\",\n    color: \"#808080\",\n    chainId: 3141,\n    blockExplorer: \"https://hyperspace.filfox.info/en\",\n    rpcUrl: \"https://api.hyperspace.node.glif.io/rpc/v1\",\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n"],"sourceRoot":""}