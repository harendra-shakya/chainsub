{"version":3,"sources":["../node_modules/@graphiql/react/dist/mode.es2.js","../node_modules/@graphiql/react/dist/onlineParser.es.js"],"names":["__defProp","Object","defineProperty","indent","state","textAfter","_a","_b","levels","length","this","electricInput","test","indentLevel","config","indentUnit","CodeMirror","defineMode","parser","onlineParser","eatWhitespace","stream","eatSpace","lexRules","LexRules","parseRules","ParseRules","editorConfig","tabSize","startState","token","fold","closeBrackets","pairs","explode","value","configurable","Punctuation","Number","String","Keyword","Document","p","list","Entry","t","Value","kind","NumberValue","StringValue","BooleanValue","NullValue","ListValue","ObjectValue","ObjectField","__name","target","options","eatWhile","isIgnored","initialState","level","step","name","type","rule","needsSeparator","prevState","pushRule","Kind","DOCUMENT","getToken","inBlockstring","match","skipToEnd","popRule","needsAdvance","advanceRule","sol","Math","floor","indentation","lex","SpecialParseRules","backupState","assign","concat","slice","expected","separator","ofRule","call","update","style","unsuccessful","to","from","keys","i","Invalid","Comment","rules","ruleKind","TypeError","successful","isList","Array","isArray","kinds"],"mappings":"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","file":"static/js/18.f8967d58.chunk.js","sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { C as CodeMirror } from \"./codemirror.es.js\";\nimport \"graphql\";\nimport { p, l as list, t } from \"./index.es.js\";\nimport { o as onlineParser } from \"./onlineParser.es.js\";\nimport \"react\";\nimport \"react-dom\";\nCodeMirror.defineMode(\"graphql-results\", (config) => {\n  const parser = onlineParser({\n    eatWhitespace: (stream) => stream.eatSpace(),\n    lexRules: LexRules,\n    parseRules: ParseRules,\n    editorConfig: { tabSize: config.tabSize }\n  });\n  return {\n    config,\n    startState: parser.startState,\n    token: parser.token,\n    indent,\n    electricInput: /^\\s*[}\\]]/,\n    fold: \"brace\",\n    closeBrackets: {\n      pairs: '[]{}\"\"',\n      explode: \"[]{}\"\n    }\n  };\n});\nfunction indent(state, textAfter) {\n  var _a, _b;\n  const levels = state.levels;\n  const level = !levels || levels.length === 0 ? state.indentLevel : levels[levels.length - 1] - (((_a = this.electricInput) === null || _a === void 0 ? void 0 : _a.test(textAfter)) ? 1 : 0);\n  return (level || 0) * (((_b = this.config) === null || _b === void 0 ? void 0 : _b.indentUnit) || 0);\n}\n__name(indent, \"indent\");\nconst LexRules = {\n  Punctuation: /^\\[|]|\\{|\\}|:|,/,\n  Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n  String: /^\"(?:[^\"\\\\]|\\\\(?:\"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*\"?/,\n  Keyword: /^true|false|null/\n};\nconst ParseRules = {\n  Document: [p(\"{\"), list(\"Entry\", p(\",\")), p(\"}\")],\n  Entry: [t(\"String\", \"def\"), p(\":\"), \"Value\"],\n  Value(token) {\n    switch (token.kind) {\n      case \"Number\":\n        return \"NumberValue\";\n      case \"String\":\n        return \"StringValue\";\n      case \"Punctuation\":\n        switch (token.value) {\n          case \"[\":\n            return \"ListValue\";\n          case \"{\":\n            return \"ObjectValue\";\n        }\n        return null;\n      case \"Keyword\":\n        switch (token.value) {\n          case \"true\":\n          case \"false\":\n            return \"BooleanValue\";\n          case \"null\":\n            return \"NullValue\";\n        }\n        return null;\n    }\n  },\n  NumberValue: [t(\"Number\", \"number\")],\n  StringValue: [t(\"String\", \"string\")],\n  BooleanValue: [t(\"Keyword\", \"builtin\")],\n  NullValue: [t(\"Keyword\", \"keyword\")],\n  ListValue: [p(\"[\"), list(\"Value\", p(\",\")), p(\"]\")],\n  ObjectValue: [p(\"{\"), list(\"ObjectField\", p(\",\")), p(\"}\")],\n  ObjectField: [t(\"String\", \"property\"), p(\":\"), \"Value\"]\n};\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { i as isIgnored, L as LexRules, P as ParseRules } from \"./index.es.js\";\nimport { Kind } from \"graphql\";\nfunction onlineParser(options = {\n  eatWhitespace: (stream) => stream.eatWhile(isIgnored),\n  lexRules: LexRules,\n  parseRules: ParseRules,\n  editorConfig: {}\n}) {\n  return {\n    startState() {\n      const initialState = {\n        level: 0,\n        step: 0,\n        name: null,\n        kind: null,\n        type: null,\n        rule: null,\n        needsSeparator: false,\n        prevState: null\n      };\n      pushRule(options.parseRules, initialState, Kind.DOCUMENT);\n      return initialState;\n    },\n    token(stream, state) {\n      return getToken(stream, state, options);\n    }\n  };\n}\n__name(onlineParser, \"onlineParser\");\nfunction getToken(stream, state, options) {\n  var _a;\n  if (state.inBlockstring) {\n    if (stream.match(/.*\"\"\"/)) {\n      state.inBlockstring = false;\n      return \"string\";\n    } else {\n      stream.skipToEnd();\n      return \"string\";\n    }\n  }\n  const { lexRules, parseRules, eatWhitespace, editorConfig } = options;\n  if (state.rule && state.rule.length === 0) {\n    popRule(state);\n  } else if (state.needsAdvance) {\n    state.needsAdvance = false;\n    advanceRule(state, true);\n  }\n  if (stream.sol()) {\n    const tabSize = (editorConfig === null || editorConfig === void 0 ? void 0 : editorConfig.tabSize) || 2;\n    state.indentLevel = Math.floor(stream.indentation() / tabSize);\n  }\n  if (eatWhitespace(stream)) {\n    return \"ws\";\n  }\n  const token = lex(lexRules, stream);\n  if (!token) {\n    const matchedSomething = stream.match(/\\S+/);\n    if (!matchedSomething) {\n      stream.match(/\\s/);\n    }\n    pushRule(SpecialParseRules, state, \"Invalid\");\n    return \"invalidchar\";\n  }\n  if (token.kind === \"Comment\") {\n    pushRule(SpecialParseRules, state, \"Comment\");\n    return \"comment\";\n  }\n  const backupState = assign({}, state);\n  if (token.kind === \"Punctuation\") {\n    if (/^[{([]/.test(token.value)) {\n      if (state.indentLevel !== void 0) {\n        state.levels = (state.levels || []).concat(state.indentLevel + 1);\n      }\n    } else if (/^[})\\]]/.test(token.value)) {\n      const levels = state.levels = (state.levels || []).slice(0, -1);\n      if (state.indentLevel) {\n        if (levels.length > 0 && levels[levels.length - 1] < state.indentLevel) {\n          state.indentLevel = levels[levels.length - 1];\n        }\n      }\n    }\n  }\n  while (state.rule) {\n    let expected = typeof state.rule === \"function\" ? state.step === 0 ? state.rule(token, stream) : null : state.rule[state.step];\n    if (state.needsSeparator) {\n      expected = expected === null || expected === void 0 ? void 0 : expected.separator;\n    }\n    if (expected) {\n      if (expected.ofRule) {\n        expected = expected.ofRule;\n      }\n      if (typeof expected === \"string\") {\n        pushRule(parseRules, state, expected);\n        continue;\n      }\n      if ((_a = expected.match) === null || _a === void 0 ? void 0 : _a.call(expected, token)) {\n        if (expected.update) {\n          expected.update(state, token);\n        }\n        if (token.kind === \"Punctuation\") {\n          advanceRule(state, true);\n        } else {\n          state.needsAdvance = true;\n        }\n        return expected.style;\n      }\n    }\n    unsuccessful(state);\n  }\n  assign(state, backupState);\n  pushRule(SpecialParseRules, state, \"Invalid\");\n  return \"invalidchar\";\n}\n__name(getToken, \"getToken\");\nfunction assign(to, from) {\n  const keys = Object.keys(from);\n  for (let i = 0; i < keys.length; i++) {\n    to[keys[i]] = from[keys[i]];\n  }\n  return to;\n}\n__name(assign, \"assign\");\nconst SpecialParseRules = {\n  Invalid: [],\n  Comment: []\n};\nfunction pushRule(rules, state, ruleKind) {\n  if (!rules[ruleKind]) {\n    throw new TypeError(\"Unknown rule: \" + ruleKind);\n  }\n  state.prevState = Object.assign({}, state);\n  state.kind = ruleKind;\n  state.name = null;\n  state.type = null;\n  state.rule = rules[ruleKind];\n  state.step = 0;\n  state.needsSeparator = false;\n}\n__name(pushRule, \"pushRule\");\nfunction popRule(state) {\n  if (!state.prevState) {\n    return;\n  }\n  state.kind = state.prevState.kind;\n  state.name = state.prevState.name;\n  state.type = state.prevState.type;\n  state.rule = state.prevState.rule;\n  state.step = state.prevState.step;\n  state.needsSeparator = state.prevState.needsSeparator;\n  state.prevState = state.prevState.prevState;\n}\n__name(popRule, \"popRule\");\nfunction advanceRule(state, successful) {\n  var _a;\n  if (isList(state) && state.rule) {\n    const step = state.rule[state.step];\n    if (step.separator) {\n      const separator = step.separator;\n      state.needsSeparator = !state.needsSeparator;\n      if (!state.needsSeparator && separator.ofRule) {\n        return;\n      }\n    }\n    if (successful) {\n      return;\n    }\n  }\n  state.needsSeparator = false;\n  state.step++;\n  while (state.rule && !(Array.isArray(state.rule) && state.step < state.rule.length)) {\n    popRule(state);\n    if (state.rule) {\n      if (isList(state)) {\n        if ((_a = state.rule) === null || _a === void 0 ? void 0 : _a[state.step].separator) {\n          state.needsSeparator = !state.needsSeparator;\n        }\n      } else {\n        state.needsSeparator = false;\n        state.step++;\n      }\n    }\n  }\n}\n__name(advanceRule, \"advanceRule\");\nfunction isList(state) {\n  const step = Array.isArray(state.rule) && typeof state.rule[state.step] !== \"string\" && state.rule[state.step];\n  return step && step.isList;\n}\n__name(isList, \"isList\");\nfunction unsuccessful(state) {\n  while (state.rule && !(Array.isArray(state.rule) && state.rule[state.step].ofRule)) {\n    popRule(state);\n  }\n  if (state.rule) {\n    advanceRule(state, false);\n  }\n}\n__name(unsuccessful, \"unsuccessful\");\nfunction lex(lexRules, stream) {\n  const kinds = Object.keys(lexRules);\n  for (let i = 0; i < kinds.length; i++) {\n    const match = stream.match(lexRules[kinds[i]]);\n    if (match && match instanceof Array) {\n      return { kind: kinds[i], value: match[0] };\n    }\n  }\n}\n__name(lex, \"lex\");\nexport { onlineParser as o };\n"],"sourceRoot":""}